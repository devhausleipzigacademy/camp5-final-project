// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User 
// connected to: Items (owned Items) & recievedItems
// inherits Location and Conversations table
model User {
  identifier     String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  firstname      String
  lastname       String
  email          String         @unique
  passwordHash   String
  passwordSalt   String
  profilePicture String?
  rating         Float
  items          Item[]         @relation("user_item")
  favorite       Json
  location       Location?
  conversations  Conversation[]
  receivedItems  Item[]         @relation("recipient_item")
}

// Location
// always connected to a user
model Location {
  identifier String @id @default(uuid())
  address    String
  lat        Float
  lon        Float
  user       User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
  userId     String @unique
}

// Conversation
// always connected to a user
// questions: how to connect related messages or a whole messaging process? how to connect the user you're writing with?
//  TODO: need more work
model Conversation {
  identifier String   @id @default(uuid())
  createdAt  DateTime @default(now())
  content    Json // each element represent the one message, but with prefix denote 'owner' || 'offer'
  User       User?    @relation(fields: [userId], references: [identifier])
  userId     String?
}

// Nodes
// to structure our categories and their relationships to each other and the items
model Node {
  identifier  String  @id @default(uuid())
  title       String  @unique // remove unique constraint here eventually
  description String?
  parentId    String?
  parent      Node?   @relation("ontology", fields: [parentId], references: [identifier], onDelete: Cascade)
  children    Node[]  @relation("ontology")
  leaves      Item[]  @relation("leaves")

  // to avoid making titles globally unique, use compound constraint commented out below
  // will be a bit tricky to get working right with queries though
  // @@unique([parentId, title])
}

// SellType enum for Items
enum SellType {
  SWAP
  FREE
}

// Item
// always connected to a user and categories (parent(Node), class, details)
// after purchase: gone === true and a connection to recipient (User) is made
model Item {
  identifier  String   @id @default(uuid())
  title       String
  images      Json
  description String
  details     Json
  user        User     @relation("user_item", fields: [userId], references: [identifier], onDelete: Cascade)
  userId      String
  sellType    SellType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Node     @relation("leaves", fields: [parentId], references: [identifier], onDelete: Cascade)
  parentId    String
  class       String
  requests    String[]
  gone        Boolean  @default(false)
  recipientId String?
  recipient   User?    @relation("recipient_item", fields: [recipientId], references: [identifier])
}
